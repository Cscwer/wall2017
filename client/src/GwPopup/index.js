// GwPopup
import GwPopupLayout from './GwPopupLayout'; 
import GwPopupController from './GwPopupController'; 
import dom_util from './dom_util';
import components from './components';
import _ from './tools';

// export default
let GwPopup = {}; 
// Counter; 
let COUNT = 0; 

// For Init 
function popupInit(Vue, option){
	history.pushState({
		name: '_'
	}, '', '');

	// Register Component Global; 
	components.register(Vue); 

	// Blur Effect On $app Generated By `option.getApp`; 
	GwPopupController.__setPrototype('onBlur', function(){
		let $app = option.getApp(); 

		$app.setAttribute('class', 'isBlur'); 
	})

	GwPopupController.__setPrototype('offBlur', function(){
		let $app = option.getApp(); 

		$app.setAttribute('class', ''); 
	})
}

GwPopup.install = function(Vue, option){
	// Init 
	let router = option.router;
	popupInit(Vue, option); 


	// Create; 
	let $popup = dom_util.createRoot(); 

	// Set Selector; 
	GwPopupLayout.el = $popup; 

	// All Done  
	GwPopupLayout.created = function(){
		console.log('[ GwPopupLayout onReady ]'); 
	}

	// Add On For Calling Sub-component   
	GwPopupLayout.methods.push = function(option){
		let item = GwPopupController.create(option); 

		this.list.push(item); 

		return item; 
	}

	GwPopupLayout.methods.pop = function(){
		return this.list.pop();
	}

	GwPopupLayout.methods.toast = function(opt){
		opt.duration = opt.duration || 3000; 
		opt.canceled = opt.canceled || false; 
		opt.cancelable = opt.cancelable || false; 
		opt.moving = false; 
		
		opt.active = false; 
		this.toasts.push(opt); 
		
		setTimeout(() => opt.active = true); 

		return new Promise((res, rej) => {
			setTimeout(() => {
				opt.active = false;

				let onIdx = this.toasts.indexOf(opt); 
				this.toasts.splice(onIdx, 1); 

				res(); 
			}, opt.duration); 
		}); 
	}



	// Instancing popup; 
	let popup_vm = new Vue(GwPopupLayout); 

	let timer = null; 
	function backer(to, from, next){
		clearTimeout(timer);
		let lastOne = popup_vm.getLastActive(); 

		if (lastOne){
			console.log('[ GwPopup onRouting ]', 'Next(false)'); 
			lastOne.close(); 
			next && next(false); 
		} else {
			console.log('[ GwPopup onRouting ]', 'Next()'); 
			next && next(); 
		}
	}

	window._backer = _backer;
	var _backer = _.throttle(backer, 500); 
	var itCan = true;

	window.addEventListener('popstate', function(e){
		if (!itCan) return;

		console.log('POPSTATE'); 
		clearTimeout(timer);
		history.pushState({
			name: '_'
		}, '', '');
		timer = setTimeout(function(){
			_backer(e); 
		})
	});

	setTimeout(() => {
		// 解决白屏 
		// 不可以过早监听事件 这样会干扰 redirect 的正常处理 
		router.beforeEach((to, from, next) => {
			itCan = false; 
			clearTimeout(timer);
			timer = setTimeout(function(){
				_backer(to, from, next); 
			});
		}); 
	}, 88); 

	// mount to prototype for all vue instances  
	Vue.prototype.$popup = popup_vm; 

	// mount to prototype for all popupitems
	GwPopupController.__setPrototype('popup_vm', popup_vm)

	// Get Instance 
	GwPopup.getPopup = () => popup_vm; 
}

export default GwPopup; 
